---
title: "DEI ACS PUMS Data Checks - Indicator 8: Median Hourly Wage"
author: "Sammy Cervantes -- Reviewing Kaitlan Wong"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus) 
library(tidyverse) 
library(readxl) 
library(writexl) 
library(dplyr)
```

#### See <https://walker-data.com/census-r/analyzing-census-microdata.html> for guidance on using tidycensus to get ACS PUMS

#### ACS PUMS Codebooks: <https://www.census.gov/programs-surveys/acs/microdata/documentation.html>

# 2021

## Get 2021 ACS PUMS data.

```{r}
# Get ACS data
pums21 <- get_pums(
  variables = c("AGEP", "RAC1P", "HISP", "PUMA", "WKHP", "WAGP", "ADJINC", "ESR", "WKWN"),
  state = "TX",
  survey = "acs1",
  year = 2021,
  recode = TRUE,
)

# View data
head(pums21)
```

## **Filter for Dallas PUMAs and mutate variables**

```{r}
# Filter for Dallas PUMAs and working-age adults
data21 <- pums21 %>%
  filter(PUMA %in% c("02304", "02305", "02306", "02307", "02309", "02310", "02311", "02312", "02313", "02314", "02315", "02316", "02319", "01901", "02001"),
         AGEP >= 25 & AGEP <= 64,
         # employed adults
         ESR %in% c(1,2,4,5)) %>%
  # recode race/ethnicity
  mutate(race_eth = case_when(
    HISP != "01" ~ "Hispanic",
    HISP == "01" & RAC1P == "1" ~ "White, non-Hispanic",
    HISP == "01" & RAC1P == "2" ~ "Black, non-Hispanic",
    HISP == "01" & RAC1P %in% c("3","4","5") ~ "AIAN, non-Hispanic",
    HISP == "01" & RAC1P %in% c("6","7") ~ "Asian or Pacific Islander, non-Hispanic",
    HISP == "01" & RAC1P %in% c("8","9") ~ "Other, non-Hispanic",
    TRUE ~ NA_character_) 
  ) %>%
  # calculate hours worked per year
  mutate(
    annual_hours = WKWN * WKHP # weeks worked annually * usual hours worked per week
      ) %>%
  # calculate hourly wage
  mutate(
    hourly_wage = WAGP / annual_hours
  )
```

## **Create table of counts and %s using person weight variable.**

```{r}
library(matrixStats)

# more info on weightedMedian: https://www.rdocumentation.org/packages/spatstat/versions/1.56-1/topics/weighted.median

# Calculate median hourly wage by race/ethnicity

summary21 <- data21 %>%
  group_by(race_eth) %>%
  summarize(
    median_wage = weightedMedian(hourly_wage, PWGTP)
  )

summary21


# Calculate the weighted median for all people
summary_all21 <- data21 %>%
  summarize(
    median_wage = weightedMedian(hourly_wage, PWGTP)
  )

summary_all21

```

## **Without considering employment status.**

This chunk of code is intended to replicate Sarah's numbers without considering employment status.

```{r}

# filter data
data21_noempsts <- pums21 %>%
  filter(PUMA %in% c("02304", "02305", "02306", "02307", "02309", "02310", "02311", "02312", "02313", "02314", "02315", "02316", "02319", "01901", "02001"),
         AGEP >= 25 & AGEP <= 64,
         # employed adults
         #ESR %in% c(1,2,4,5)
         ) %>%
  # recode race/ethnicity
  mutate(race_eth = case_when(
    HISP != "01" ~ "Hispanic",
    HISP == "01" & RAC1P == "1" ~ "White, non-Hispanic",
    HISP == "01" & RAC1P == "2" ~ "Black, non-Hispanic",
    HISP == "01" & RAC1P %in% c("3","4","5") ~ "AIAN, non-Hispanic",
    HISP == "01" & RAC1P %in% c("6","7") ~ "Asian or Pacific Islander, non-Hispanic",
    HISP == "01" & RAC1P %in% c("8","9") ~ "Other, non-Hispanic",
    TRUE ~ NA_character_) 
  ) %>%
  # calculate hours worked per year
  mutate(
    annual_hours = WKWN * WKHP # weeks worked annually * usual hours worked per week
      ) %>%
  # calculate hourly wage
  mutate(
    hourly_wage = WAGP / annual_hours
  )


# Calculate median hourly wage by race/ethnicity

summary21_noempsts <- data21_noempsts  %>%
  group_by(race_eth) %>%
  summarize(
    median_wage = weightedMedian(round(hourly_wage, 2), PWGTP, na.rm = TRUE)
  )

summary21_noempsts

# Calculate the weighted median for all people
summary21_all_noempsts <- data21_all %>%
  summarize(
    median_wage = weightedMedian(round(hourly_wage, 2), PWGTP, na.rm = TRUE)
  )

summary21_all_noempsts

```

# 2019

## **Repeat steps for 2019 data.**

```{r}
# Get ACS data
pums19 <- get_pums(
  variables = c("AGEP", "RAC1P", "HISP", "PUMA", "WKHP", "WAGP", "ESR", "ADJINC", "WKWN"),
  state = "TX",
  survey = "acs1",
  year = 2019,
  recode = TRUE,
)

# View data
head(pums19)
```

```{r}
# Filter for Dallas PUMAs and working-age adults
data19 <- pums19 %>%
  filter(PUMA %in% c("02304", "02305", "02306", "02307", "02309", "02310", "02311", "02312", "02313", "02314", "02315", "02316", "02319", "01901", "02001"),
         AGEP >= 25 & AGEP <= 64,
         # employed adults
         ESR %in% c(1,2,4,5)) %>%
  # recode race/ethnicity
  mutate(race_eth = case_when(
    HISP != "01" ~ "Hispanic",
    HISP == "01" & RAC1P == "1" ~ "White, non-Hispanic",
    HISP == "01" & RAC1P == "2" ~ "Black, non-Hispanic",
    HISP == "01" & RAC1P %in% c("3","4","5") ~ "AIAN, non-Hispanic",
    HISP == "01" & RAC1P %in% c("6","7") ~ "Asian or Pacific Islander, non-Hispanic",
    HISP == "01" & RAC1P %in% c("8","9") ~ "Other, non-Hispanic",
    TRUE ~ NA_character_) 
  ) %>%
  # calculate hours worked per year
  mutate(
    annual_hours = WKWN * WKHP # weeks worked annually * usual hours worked per week
      ) %>%
  # calculate hourly wage
  mutate(
    hourly_wage = WAGP / annual_hours
  )


# Adjust for inflation
inflation_factor <- 1.05

#ADJINC (1.010145)
adjinc <- as.numeric(pums19$ADJINC[1])

# Calculate median hourly wage by race/ethnicity (inflation-adjusted)
summary19 <- data19 %>%
  group_by(race_eth) %>%
  summarize(
    median_wage = weightedMedian(hourly_wage * inflation_factor, PWGTP)
  )

summary19

# Calculate median hourly wage by race/ethnicity (Adjust with ADJINC)
summary19_adjinc <- data19 %>%
  group_by(race_eth) %>%
  summarize(
    median_wage = weightedMedian(hourly_wage * adjinc, PWGTP)
  )

summary19_adjinc


# Calculate the weighted median for all people (inflation-adjusted)
summary_all19 <- data19 %>%
  summarize(
    median_wage = weightedMedian(hourly_wage * inflation_factor, PWGTP)
  )

summary_all19

# Sammy: Calculate the weighted median for all people (Adjust with ADJINC)
summary_all19_adjinc <- data19 %>%
  summarize(
    median_wage = weightedMedian(hourly_wage * adjinc, PWGTP)
  )

summary_all19_adjinc 

```

## **Without considering employment status.**

This chunk of code is intended to replicate Sarah's numbers without considering employment status.

```{r}

# filter data
data19_noempsts <- pums19 %>%
  filter(PUMA %in% c("02304", "02305", "02306", "02307", "02309", "02310", "02311", "02312", "02313", "02314", "02315", "02316", "02319", "01901", "02001"),
         AGEP >= 25 & AGEP <= 64,
         # employed adults
         #ESR %in% c(1,2,4,5)
         ) %>%
  # recode race/ethnicity
  mutate(race_eth = case_when(
    HISP != "01" ~ "Hispanic",
    HISP == "01" & RAC1P == "1" ~ "White, non-Hispanic",
    HISP == "01" & RAC1P == "2" ~ "Black, non-Hispanic",
    HISP == "01" & RAC1P %in% c("3","4","5") ~ "AIAN, non-Hispanic",
    HISP == "01" & RAC1P %in% c("6","7") ~ "Asian or Pacific Islander, non-Hispanic",
    HISP == "01" & RAC1P %in% c("8","9") ~ "Other, non-Hispanic",
    TRUE ~ NA_character_) 
  ) %>%
  # calculate hours worked per year
  mutate(
    annual_hours = WKWN * WKHP # weeks worked annually * usual hours worked per week
      ) %>%
  # calculate hourly wage
  mutate(
    hourly_wage = WAGP / annual_hours
  )


# Adjust for inflation
inflation_factor <- 1.05


# Calculate median hourly wage by race/ethnicity

summary19_noempsts <- data19_noempsts  %>%
  group_by(race_eth) %>%
  summarize(
    median_wage = weightedMedian(round(hourly_wage * inflation_factor, 2), PWGTP, na.rm = TRUE)
  )

summary19_noempsts

# Calculate the weighted median for all people
summary19_all_noempsts <- data21_all %>%
  summarize(
    median_wage = weightedMedian(round(hourly_wage * inflation_factor, 2), PWGTP, na.rm = TRUE)
  )

summary19_all_noempsts

```

**Export tables to Excel.**

```{r}
# Export tables to Excel

write_xlsx(list("2021" = summary21, "2019" = summary19), "8_Median Hourly Wage.xlsx")
```

# Working with Sarah's

Here's an explanation of the variables you provided:

1.  `YEAR`: Year of Survey

    -   This variable represents the year when the survey was conducted or the data was collected. It indicates the specific year to which the survey data corresponds.

2.  `SAMPLE`: Sample Code

    -   The `SAMPLE` variable is a code that identifies the sample or subsample from which the individual's data was drawn. It helps differentiate between different survey samples or subsamples if applicable.

3.  `SERIAL`: Person Sequence Number (Original)

    -   `SERIAL` is a unique identifier assigned to each individual in the dataset. It helps distinguish individual records and link them to their respective households.

4.  `CBSERIAL`: Person Sequence Number (Final)

    -   `CBSERIAL` is a revised version of the person sequence number, which may have been adjusted or recoded during data processing.

5.  `HHWT`: Household Weight

    -   `HHWT` represents the statistical weight assigned to each household. Survey weights are used to ensure that the data is representative of the entire population.

6.  `CLUSTER`: Cluster Code

    -   The `CLUSTER` variable is a code that identifies the cluster or primary sampling unit (PSU) to which the household or individual belongs. Clustering is a part of the survey sampling process.

7.  `ADJUST`: Adjustment Flag

    -   `ADJUST` is a flag or indicator that shows whether any adjustments have been made to the data during post-processing or weighting.

8.  `STRATA`: Stratum Code

    -   The `STRATA` variable is a code that identifies the stratum to which the household or individual belongs. Stratification is a part of the survey sampling process.

9.  `GQ`: Group Quarters Type

    -   `GQ` categorizes the type of group quarters (e.g., dormitories, nursing homes, correctional facilities) if the individual resides in such a setting.

10. `PERNUM`: Person Number in Household

    -   `PERNUM` indicates the order of the individual within their household. For example, the first person in a household would have `PERNUM = 1`, the second person would have `PERNUM = 2`, and so on.

11. `PERWT`: Person Weight

    -   `PERWT` represents the statistical weight assigned to each individual. Like `HHWT`, it is used to ensure that the data is representative of the population at the individual level.

12. `AGE`: Age of the Individual

    -   `AGE` denotes the age of the individual at the time of the survey or data collection.

13. `EMPSTAT`: Employment Status

    -   `EMPSTAT` classifies the individual's employment status (e.g., employed, unemployed, not in the labor force) based on survey responses.

14. `EMPSTATD`: Employment Status - Detailed

    -   `EMPSTATD` provides a more detailed classification of the individual's employment status if available.

15. `WKSWORK1`: Weeks Worked in the Past 12 Months (Recoded)

    -   `WKSWORK1` indicates the number of weeks the individual worked in the past 12 months. This variable may have been recoded for privacy and confidentiality reasons.

16. `WKSWORK2`: Weeks Worked in the Past 12 Months

    -   `WKSWORK2` represents the original, unrecoded variable that indicates the number of weeks the individual worked in the past 12 months.

17. `UHRSWORK`: Usual Hours Worked per Week

    -   `UHRSWORK` denotes the number of hours the individual usually works per week.

18. `INCWAGE`: Wage and Salary Income

    -   `INCWAGE` represents the individual's total wage and salary income, which includes earnings from employment.

```{r}

library(ipumsr)
library(car)
library(survey)
library(tidyverse)

ddi <- read_ipums_ddi("C:/Users/cervantes/OneDrive - Center for Public Policy Priorities/Desktop/Dallas Indicators/8 - Median Wage/SC pulled/usa_00006.xml")
data_raw <- read_ipums_micro(ddi)
data <- data_raw


```

## 

## Creating Unique PUMA IDs & Filtering for Dallas PUMAs

```{r}

library(stringr)
data$PUMA_4<-str_pad(data$PUMA, 5, pad = "0") #add leading zeros
data$PUMAID <- paste(data$STATEFIP,data$PUMA_4,sep = "") #concatenate state fips and puma fips
data$PUMAID_num <- as.numeric(data$PUMAID)
ids <- plyr::count(data,'PUMAID')
dal_codes_string<-c("4802304","4802305","4802306","4802307","4802309","4802310","4802311","4802312","4802313","4802314","4802315","4802316","4802319","4801901","4802001")

data$DalPumas <- ifelse(data$PUMAID %in% dal_codes_string,1,0)
data<-subset(data, DalPumas == 1)

#See number of records per PUMA
dal_ids <- plyr::count(data,'PUMAID')
dal_ids

```

## Recoding Sex Categories

```{r}

data$SEX <- as.numeric(data$SEX)
data$sex_c <- Recode(data$SEX, recodes="1='Male'; 2='Female'; else=NA", as.factor=T)

```

## Creating Race/Ethnicity Categories

```{r}

# Recoding Hispanic/Latino ethnicity
data$HISPAN <- as.numeric(data$HISPAN)
data$hisp <- Recode(data$HISPAN, recodes = "0='Not Hispanic'; 1:4='Hispanic/Latino'; else = NA", as.factor=T)

# Recoding Race 
data$RACE <- as.numeric(data$RACE)
data$race_c <- Recode(data$RACE, recodes = "1='White'; 2='Black'; 3='Native American'; 4:6='Asian/PI'; else = 'Other or 2+'", as.factor=T)

#Creating Interaction Term for Race/Ethnicity to create simplified categories
data$race_eth <- interaction(data$hisp, data$race_c, sep = "_")

# Redefining Race/Eth Categories from Interaction Terms
data$race_eth  <- as.factor(ifelse(substr(as.character(data$race_eth),1,8) == "Hispanic", "Hispanic, Any Race", as.character(data$race_eth)))

data$race_eth <-Recode(data$race_eth, recodes="'Not Hispanic_Other or 2+'='Other NH'; 'Not Hispanic_White'='White NH';'Not Hispanic_Black'='Black NH';'Not Hispanic_Native American'='AIAN NH'; 'Not Hispanic_Asian/PI'='Asian/PI NH'", as.factor=T)
```

## Recoding & Calculating Variables

```{r}

# working age
data$work_age <- ifelse(data$AGE>=25 & data$AGE<65,1,0) #working age = 1  

# employed
data$work_status <- ifelse(data$EMPSTAT ==1, 1, 0) # employed = 1 

# adjust for inflation
data$wage_inc <- ifelse(data$INCWAGE==999998,NA,ifelse(data$INCWAGE==999999,NA, data$INCWAGE))

  #adjust for inflation: CPI Calculator $1 in 2019 = $1.05 in 2021
  # $1 in 2016 = $1.10 in 2021
  # $1 in 2017 = $1.08 in 2021  
  data$cpi <-Recode(data$YEAR, recodes="2019=1.05 ; 2021 = 1; 2017=1.08; 2016=1.10")   
  
  
  data$wage_inc_adj <- data$wage_inc * data$cpi #adjusting for inflation to 2021 dollars
  
  
# working hours
data$WKSWORK1 <- ifelse(data$WKSWORK1==0,NA,data$WKSWORK1)
data$WKSWORK2 <- ifelse(data$WKSWORK2==0,NA,data$WKSWORK2)


data$wkw2_mod <-Recode(data$WKSWORK2, recodes="0=NA; 1 = (1+13)/2 ; 2 = (14+26)/2; 3 = (27+39)/2; 4 = (40+47)/2 ; 5 = (48+49)/2 ;6 = (50+52)/2")
data$weeks_wrked <- ifelse(data$YEAR>2018,data$WKSWORK1,ifelse(data$YEAR<2018,data$wkw2_mod,NA))


  data$HRS_per_year <- data$weeks_wrked * data$UHRSWORK #calculating the number of hours worked per year
  
  data$hourly_wage <- data$wage_inc_adj / data$HRS_per_year #calculating the average hourly wage based on wage income and hours worked per year. 
  
  
  #filtering for only those defined as adults aged 25-64 & employed.
  data$ind8_hrlywage <- ifelse(data$work_age == 1 & data$work_status == 1 , data$hourly_wage, NA) 
  
  
#PERSON WEIGHTS DESIGN
des_p <- svydesign(id=~CLUSTER, strata=~interaction(STRATA,YEAR), weights=~PERWT, data=data, nest=TRUE) 


#TABLE BY RACE/ETH & YEAR (subset by working age adults)
table8_race <- svyby(formula = ~ind8_hrlywage, by = ~YEAR+race_eth, des_p, svyquantile, quantiles=c(0.5), na.rm=TRUE)

table8_totDallas <- svyby(formula = ~ind8_hrlywage, by = ~YEAR, des_p, svyquantile, quantiles=c(0.5), na.rm=TRUE)

  
#TABLE BY SEX & YEAR (subset by working age adults)
table8_sex <- svyby(formula = ~ind8_hrlywage, by = ~YEAR+sex_c, des_p, svyquantile, quantiles=c(0.5), na.rm.all=TRUE, na.rm=TRUE)

```

## 

```{r}
# Assuming 'my_data' is your survey data frame
missing_data <- data[!complete.cases(data$ind8_hrlywage, data$YEAR, data$race_eth), ]

# Print the rows with missing values, if any
print(missing_data)

```
